name: Update Package
on:
  workflow_call:
    inputs:
      package:
        description: The package name to update
        required: true
        type: string
      force-open-pr:
        description: Force opening a PR, regardless if already a PR is existing for that package
        type: boolean
        required: false
        default: false
      open-pr:
        description: Automatically open a PR on nixpkgs. A PR won't be created if a PR for this package already exists
        required: false
        type: boolean
        default: true
      nixpkgs-review-gha-fork:
        description: The nixpkgs-review-gha fork used to run nixpkgs-review
        required: false
        type: string
        default: ""
      nixpkgs-repo:
        description: The nixpkgs repository to target
        required: false
        type: string
        default: NixOS/nixpkgs

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout nixpkgs-update-gha
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: nixpkgs-update-gha

      - name: Check if PR exists
        id: find-prs
        if: ${{ !inputs.force-open-pr }}
        run: |
          # Query open PRs and filter with jq+regex on the title.
          matches=$(gh pr list --repo ${{ inputs.nixpkgs-repo }} --state open --json number,title \
            | jq -c --arg re "${{ inputs.package }}:" 'map(select(.title | test($re; "i")))')

          count=$(jq 'length' <<<"$matches")
          if [ "$count" -gt 0 ]; then
            numbers=$(jq -r 'map(.number)|join(",")' <<<"$matches")
            echo "::notice::Found existing PR(s) for ${{ inputs.package }}: #$numbers"
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Skip if PR exists
        if: ${{ steps.find-prs.outputs.found == 'true' && !inputs.force-open-pr }}
        run: |
          echo "::warning::Skipping update for ${{ inputs.package }} - PR already exists"
          exit 0

      - name: Install Nix
        if: ${{ steps.find-prs.outputs.found != 'true' || inputs.force-open-pr }}
        uses: cachix/install-nix-action@v31

      - name: Clone nixpkgs
        if: ${{ steps.find-prs.outputs.found != 'true' || inputs.force-open-pr }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.nixpkgs-repo }}
          path: nixpkgs
          persist-credentials: false

      - name: Get the current version
        if: ${{ steps.find-prs.outputs.found != 'true' || inputs.force-open-pr }}
        id: current-version
        run: |
          current_version=$(nix eval .#${{ inputs.package }}.version --raw 2>/dev/null || echo "unknown")
          echo "::notice::Current version: ${{ inputs.package }}-$current_version"
          echo "version=$current_version" >> "$GITHUB_OUTPUT"
        working-directory: nixpkgs

      - name: Run Update Script
        if: ${{ steps.find-prs.outputs.found != 'true' || inputs.force-open-pr }}
        run: |
          if output=$(nix develop -f maintainers/scripts/update.nix --argstr package ${{ inputs.package }} 2>&1); then
            echo "$output"
          else
            echo "::error::Update failed for package ${{ inputs.package }}"
            echo "$output"
            exit 1
          fi
        working-directory: nixpkgs

      - name: Detect changes
        if: ${{ steps.find-prs.outputs.found != 'true' || inputs.force-open-pr }}
        id: changes
        run: |
          if git diff --quiet; then
            echo "::notice::No changes detected for package ${{ inputs.package }}"
            exit 0
          fi
          echo "has-changes=true" >> "$GITHUB_OUTPUT"
        working-directory: nixpkgs

      - name: Get the new version
        if: ${{ steps.changes.outputs.has-changes == 'true' }}
        id: new-version
        run: |
          new_version=$(nix eval .#${{ inputs.package }}.version --raw 2>/dev/null || echo "unknown")
          echo "New version: ${{ inputs.package }}-$new_version"
          echo "version=$new_version" >> "$GITHUB_OUTPUT"
        working-directory: nixpkgs

      - name: Prepare PR body
        if: ${{ steps.changes.outputs.has-changes == 'true' && inputs.open-pr }}
        id: pr-body
        run: |
          cat > pr-body.md <<'EOF'
          Automatic update generated by [nixpkgs-update-gha](https://github.com/${{ github.repository }}).

          ###### Updates performed

              * Updated ${{ inputs.package }}: ${{ steps.current-version.outputs.version }} -> ${{ steps.new-version.outputs.version }}

          EOF

          if [[ -n "${{ inputs.nixpkgs-review-gha-fork }}" ]]; then
            cat >> pr-body.md <<'EOF'
          ## `nixpkgs-review` result

          ✅ **nixpkgs-review triggered automatically.**

          Check the review status at: https://github.com/${{ inputs.nixpkgs-review-gha-fork }}/actions/workflows/review.yml

          EOF
          else
            cat >> pr-body.md <<'EOF'
          ## `nixpkgs-review` result

          ⚠️ **nixpkgs-review not configured** - Manual review required.

          EOF
          fi

          echo "body<<EOF" >> "$GITHUB_OUTPUT"
          cat pr-body.md >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create PR
        id: create-pr
        if: ${{ steps.changes.outputs.has-changes == 'true' && inputs.open-pr }}
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GH_TOKEN }}
          path: nixpkgs
          commit-message: "${{ inputs.package }}: ${{ steps.current-version.outputs.version }} -> ${{ steps.new-version.outputs.version }}"
          branch: update-${{ inputs.package }}
          delete-branch: true
          branch-suffix: short-commit-hash
          title: "${{ inputs.package }}: ${{ steps.current-version.outputs.version }} -> ${{ steps.new-version.outputs.version }}"
          body: ${{ steps.pr-body.outputs.body }}

      - name: Trigger nixpkgs-review-gha
        if: ${{ inputs.nixpkgs-review-gha-fork != '' && steps.create-pr.outputs.pull-request-number }}
        run: |
          if [[ -n "$GH_TOKEN" ]]; then
            gh workflow run review.yml -R ${{ inputs.nixpkgs-review-gha-fork }} -f pr=${{ steps.create-pr.outputs.pull-request-number }}
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
