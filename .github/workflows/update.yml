name: Update packages
on:
  schedule:
    # Run wednesday and friday at 2 AM UTC
    - cron: "0 2 * * 3,5"
  workflow_dispatch:
    inputs:
      packages:
        description: 'Packages to update (space-separated). Format: "foo bar baz".  Defaults to PACKAGES var.'
        required: false
        type: string
      skip-if-pr-exists:
        description: Skip if PR exists
        type: boolean
        required: false
        default: true
      nixpkgs-review-gha:
        description: Trigger external nixpkgs-review-gha workflow after successful update
        required: false
        type: boolean
        default: false

# Prevent overlapping runs that could create duplicate PRs
concurrency:
  group: update-packages-${{ github.ref }}
  cancel-in-progress: true

# Default permissions - jobs explicitly elevate as needed
permissions:
  contents: read

env:
  # Configurable via repository variables
  PACKAGES: ${{ vars.PACKAGES || '' }}
  SKIP_IF_PR_EXISTS: ${{ vars.SKIP_IF_PR_EXISTS || 'true' }}
  NIXPKGS_REVIEW_GHA: ${{ vars.NIXPKGS_REVIEW_GHA || 'false' }}
  NIXPKGS_REPO: ${{ vars.NIXPKGS_REPO || 'NixOS/nixpkgs' }}
  NIXPKGS_FORK: ${{ vars.NIXPKGS_FORK || '' }}
  NIXPKGS_REVIEW_GHA_REPO: ${{ vars.NIXPKGS_REVIEW_GHA_REPO || '' }}

jobs:
  parse-inputs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    outputs:
      packages: ${{ steps.parse-inputs.outputs.packages }}
      skip-if-pr-exists: ${{ steps.parse-inputs.outputs.skip-if-pr-exists }}
      nixpkgs-review-gha: ${{ steps.parse-inputs.outputs.nixpkgs-review-gha }}
      nixpkgs-repo: ${{ steps.parse-inputs.outputs.nixpkgs-repo }}
      nixpkgs-fork: ${{ steps.parse-inputs.outputs.nixpkgs-fork }}
      nixpkgs-review-gha-repo: ${{ steps.parse-inputs.outputs.nixpkgs-review-gha-repo }}

    steps:
      - name: Validate inputs
        run: |
          echo "::group::Validating configuration"

          # Validate NIXPKGS_FORK is set
          if [ -z "${{ env.NIXPKGS_FORK }}" ]; then
            echo "::error::NIXPKGS_FORK variable is required but not set"
            echo "::error::Configure this in Settings → Secrets and variables → Actions → Variables"
            exit 1
          fi

          # Validate package list format
          packages="${{ inputs.packages || env.PACKAGES }}"
          if [ -z "$packages" ]; then
            echo "::error::No packages specified"
            echo "::error::Provide packages via workflow input or PACKAGES repository variable"
            exit 1
          fi

          # Basic validation of package names (alphanumeric, hyphens, underscores, dots)
          for pkg in $packages; do
            if ! echo "$pkg" | grep -qE '^[a-zA-Z0-9._-]+$'; then
              echo "::error::Invalid package name: $pkg"
              echo "::error::Package names should contain only alphanumeric characters, hyphens, underscores, and dots"
              exit 1
            fi
          done

          echo "::notice::Validated $packages"
          echo "::endgroup::"

      - name: Parse inputs
        id: parse-inputs
        run: |
          echo "::group::Parsing inputs"

          packages="${{ inputs.packages || env.PACKAGES }}"

          # Handle boolean inputs properly - GitHub Actions provides null for unset optional inputs
          # Use ternary-style expression and normalize to 'true' or 'false' strings
          if [ "${{ inputs.skip-if-pr-exists }}" = "true" ]; then
            skip_pr="true"
          elif [ "${{ inputs.skip-if-pr-exists }}" = "false" ]; then
            skip_pr="false"
          else
            # Input not provided, use environment variable
            [ "${{ env.SKIP_IF_PR_EXISTS }}" = "true" ] && skip_pr="true" || skip_pr="false"
          fi

          if [ "${{ inputs.nixpkgs-review-gha }}" = "true" ]; then
            nixpkgs_review_gha="true"
          elif [ "${{ inputs.nixpkgs-review-gha }}" = "false" ]; then
            nixpkgs_review_gha="false"
          else
            # Input not provided, use environment variable
            [ "${{ env.NIXPKGS_REVIEW_GHA }}" = "true" ] && nixpkgs_review_gha="true" || nixpkgs_review_gha="false"
          fi

          nixpkgs_review_gha_repo="${{ env.NIXPKGS_REVIEW_GHA_REPO || '' }}"

          echo "packages=$packages" >> "$GITHUB_OUTPUT"
          echo "skip-if-pr-exists=$skip_pr" >> "$GITHUB_OUTPUT"
          echo "nixpkgs-review-gha=$nixpkgs_review_gha" >> "$GITHUB_OUTPUT"
          echo "nixpkgs-repo=${NIXPKGS_REPO}" >> "$GITHUB_OUTPUT"
          echo "nixpkgs-fork=${NIXPKGS_FORK}" >> "$GITHUB_OUTPUT"
          echo "nixpkgs-review-gha-repo=$nixpkgs_review_gha_repo" >> "$GITHUB_OUTPUT"

          echo "::notice::Parsed configuration: packages=$packages, skip-if-pr-exists=$skip_pr, nixpkgs-review-gha=$nixpkgs_review_gha"
          echo "::endgroup::"

  prepare-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: parse-inputs
    permissions:
      contents: read

    outputs:
      packages: ${{ steps.create-matrix.outputs.packages }}

    steps:
      - name: Create matrix
        id: create-matrix
        run: |
          echo "::group::Creating update matrix"

          packages="${{ needs.parse-inputs.outputs.packages }}"

          # Convert space-separated packages to JSON array
          matrix_json=$(echo "$packages" | tr ' ' '\n' | jq -R -s -c '
            split("\n") |
            map(select(length > 0)) |
            map({package: .})
          ')

          total=$(echo "$matrix_json" | jq 'length')

          if [ "$total" -eq 0 ]; then
            echo "::warning::No packages to update"
          else
            echo "::notice::Prepared matrix with $total package(s): $packages"
          fi

          echo "packages=$matrix_json" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"

  update:
    needs:
      - prepare-matrix
      - parse-inputs
    if: ${{ needs.prepare-matrix.outputs.packages != '[]' }}
    permissions:
      contents: write
      pull-requests: write
    strategy:
      fail-fast: false
      # Limit concurrent updates to prevent API rate limiting and resource exhaustion
      max-parallel: 3
      matrix:
        include: ${{ fromJson(needs.prepare-matrix.outputs.packages) }}
    uses: ./.github/workflows/update-package.yml
    with:
      nixpkgs-repo: ${{ needs.parse-inputs.outputs.nixpkgs-repo }}
      nixpkgs-fork: ${{ needs.parse-inputs.outputs.nixpkgs-fork }}
      # Convert string outputs to boolean for type-safe workflow calls
      skip-if-pr-exists: ${{ needs.parse-inputs.outputs.skip-if-pr-exists == 'true' }}
      nixpkgs-review-gha: ${{ needs.parse-inputs.outputs.nixpkgs-review-gha == 'true' }}
      nixpkgs-review-gha-repo: ${{ needs.parse-inputs.outputs.nixpkgs-review-gha-repo }}
      package: ${{ matrix.package }}
    secrets: inherit
